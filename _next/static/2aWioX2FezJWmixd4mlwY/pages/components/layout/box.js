(window.webpackJsonp=window.webpackJsonp||[]).push([[40],{"+wNj":function(e,n,t){"use strict";function o(e,n){if(null==e)return{};var t,o,a={},r=Object.keys(e);for(o=0;o<r.length;o++)t=r[o],n.indexOf(t)>=0||(a[t]=e[t]);return a}t.d(n,"a",(function(){return o}))},HbGN:function(e,n,t){"use strict";t.d(n,"a",(function(){return a}));var o=t("+wNj");function a(e,n){if(null==e)return{};var t,a,r=Object(o.a)(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)t=i[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}},Km8e:function(e,n,t){"use strict";var o=Object.assign.bind(Object);e.exports=o,e.exports.default=e.exports},KmaY:function(e,n,t){"use strict";t.r(n),t.d(n,"default",(function(){return m}));var o=t("cxan"),a=t("HbGN"),r=t("ERkP"),i=t.n(r),l=t("ZVZ0"),p=(i.a.createElement,{}),b="wrapper";function s(e){var n=e.components,t=Object(a.a)(e,["components"]);return Object(l.b)(b,Object(o.a)({},p,t,{components:n,mdxType:"MDXLayout"}),Object(l.b)("h1",null,"Box"),Object(l.b)("p",null,"This is our kitchen sink layout component, that should eventually have 99% of the CSS properties supported that we need at any one time while building products. The goal with Box is that we completely stop writing CSS when writing app code. You will see different tags next to the props which are explained below."),Object(l.b)("h2",null,"CSS Utility Approach"),Object(l.b)("p",null,'The first benefit that comes from this approach is that it doesn\'t require any additional setup to add styling to a component. With styled-components the first thing you need to do is think of a name for the component. This add completely unnecessary overhead to writing front end code. Not every component needs a semantic name. Some components are just necessary wrappers because of how flexbox layout works for example. So in the case of styled-components you might end up with a bunch of "Containers", "Wrappers", and other "generic" components. Class names have similar issues. How much time did you spend thinking of a name for a css class, only for it to be out of date 5 minutes later?'),Object(l.b)("p",null,"Box component introduces utility-first css popularized by frameworks like tailwind where the naming can be added when needed and the rest of the time we are just adding styles."),Object(l.b)("p",null,"Second benefit of utility css component is using design tokens as values for props. Design token is just a fancy name for a standardized name that maps to a particular value. Prop values like ",Object(l.b)("inlineCode",{parentName:"p"},"xsmall"),", ",Object(l.b)("inlineCode",{parentName:"p"},"full"),", and ",Object(l.b)("inlineCode",{parentName:"p"},"primaryColour")," are design tokens standardized in our theme. Where possible, designers and developers should work together to create a set of standard design tokens for their app and adhere to it in most cases."),Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre",className:"language-jsx",metastring:"render expanded",render:!0,expanded:!0},'<Box padding="medium" borderRadius="small" bgColor="deepSolitude">\n    <Stack space="small">\n        <Heading level="3" size="xxsmall">\n            Lorem ipsum\n        </Heading>\n        <Text size="small">\n            In publishing and graphic design, Lorem ipsum is a placeholder text commonly used to\n            demonstrate the visual form of a document or a typeface without relying on meaningful\n            content. Lorem ipsum may be used as a placeholder before final copy is available.\n        </Text>\n    </Stack>\n</Box>\n')),Object(l.b)("p",null,"Final benefit of using Box is responsive props. Most props on Box are responsive, meaning you can give it a value such as an array ",Object(l.b)("inlineCode",{parentName:"p"},'<Box padding={["small", "medium", "xlarge"]} />'),". In this particular example, the Box will have a padding of 8px on a mobile device, 20px on a tablet, and 32px on desktop. The px values are coming from the theme so in your app the specific values might differ. Simply put, it is faster way of writing media queries. The device screen size breakpoints ",Object(l.b)("strong",{parentName:"p"},"are not themeable")," however, so that is standardized across all apps for the time being."),Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre",className:"language-jsx",metastring:"render expanded",render:!0,expanded:!0},'<Box\n    padding={["small", "medium", "xlarge"]}\n    borderRadius={["small", "medium", "xsmall", "xxsmall"]}\n    bgColor="deepSolitude"\n>\n    <Stack space={["medium", "small"]} align={["left", "center"]}>\n        <Heading level="3" size="xxsmall">\n            Responsive props\n        </Heading>\n\n        <Box maxW={["100%", 300]}>\n            <Hidden below="tablet">\n                <Text size="small" align="center">\n                    Open this example in playroom to see the final result rendered in different\n                    screen sizes.\n                </Text>\n            </Hidden>\n            <Hidden above="mobile">\n                <Text size="small">\n                    Open this example in playroom to see the final result rendered in different\n                    screen sizes.\n                </Text>\n            </Hidden>\n        </Box>\n    </Stack>\n</Box>\n')),Object(l.b)("p",null,"As you can see in the above example, not all components support responsive props, so we have to resort to using Hidden to wrap some parts of the tree and conditionally render on different screen sizes."),Object(l.b)("p",null,"Sometimes, trying to achieve a responsive layout using nothing but responsive props can result in very messy code. In those cases it is a better option to render entirely different components on different screen sizes. Especially, when those different screen sizes imply different UX patterns."),Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre",className:"language-js"},'import {Box} from "@unibuddy/patron";\n')),Object(l.b)("h2",null,"React Native"),Object(l.b)("p",null,"This may not apply to you depending on which product area you are working on but Box has one additional benefit. That is (for the most part) it is built for cross-platform development. Like most Layout components, it allows for quick prototyping in a web based environment, like storybook or playroom, and then that code can be copied over to react-native, and it just works. ",Object(l.b)("strong",{parentName:"p"},"React native doesn't support responsive props at the moment, so only the first value from the array will be applied.")),Object(l.b)("table",null,Object(l.b)("thead",{parentName:"table"},Object(l.b)("tr",{parentName:"thead"},Object(l.b)("th",{parentName:"tr",align:null},"Tag name"),Object(l.b)("th",{parentName:"tr",align:null},"Description"))),Object(l.b)("tbody",{parentName:"table"},Object(l.b)("tr",{parentName:"tbody"},Object(l.b)("td",{parentName:"tr",align:null},Object(l.b)("inlineCode",{parentName:"td"},"raw")),Object(l.b)("td",{parentName:"tr",align:null},'Raw CSS value (flex-start, center, "12px", -20, etc.)')),Object(l.b)("tr",{parentName:"tbody"},Object(l.b)("td",{parentName:"tr",align:null},Object(l.b)("inlineCode",{parentName:"td"},"token")),Object(l.b)("td",{parentName:"tr",align:null},"Design token from theme (small, xlarge, primaryColour)")),Object(l.b)("tr",{parentName:"tbody"},Object(l.b)("td",{parentName:"tr",align:null},Object(l.b)("inlineCode",{parentName:"td"},"theme.path.value")),Object(l.b)("td",{parentName:"tr",align:null},"Dot notation path to the value in the global theme object")))),Object(l.b)("p",null,"Some design tokens are older and some newer. In general, Box and other layout components support newer small, medium, large, xlarge, etc. While older components like Button and Dialog use sm, md, lg. Hopefully, tools like typescript and prop-types can help with this and you can get autocompletion working in your editor. Considering most components are moving towards the new naming scheme, you should rarely use the old design tokens outside of a button. And finally, we will introduce aliases to older components so they can have a unified naming scheme."),Object(l.b)("h2",null,"Responsive props"),Object(l.b)("p",null,"If you are using typescript in your application, you should see type hints on all props indicating is it a ",Object(l.b)("inlineCode",{parentName:"p"},"ResponsiveProp<PropName>")," or a simple value prop."),Object(l.b)("h3",null,"Padding"),Object(l.b)("blockquote",null,Object(l.b)("p",{parentName:"blockquote"},Object(l.b)("inlineCode",{parentName:"p"},"token"),", ",Object(l.b)("inlineCode",{parentName:"p"},"theme.space"))),Object(l.b)("p",null,"One of the most common use cases for Box is to add padding. ",Object(l.b)("strong",{parentName:"p"},"You should not be using padding to create vertical or horizontal space between multiple components.")," This is the job of Stack, Inline, and the rest of the Layout components. They maintain same spacing within a layout group, and therefore, a consistent spacing rhythm."),Object(l.b)("p",null,"You can add padding across all sides, individual, or horizontal or vertical only padding with ",Object(l.b)("inlineCode",{parentName:"p"},"paddingX")," and ",Object(l.b)("inlineCode",{parentName:"p"},"paddingY"),"."),Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre",className:"language-jsx",metastring:"render=true",render:"true"},'<Inline space="medium">\n    <Box padding="medium" backgroundColor="solitude">\n        padding\n    </Box>\n    <Box paddingX="medium" backgroundColor="solitude">\n        paddingX\n    </Box>\n    <Box paddingY="medium" backgroundColor="solitude">\n        paddingY\n    </Box>\n    <Box paddingTop="medium" backgroundColor="solitude">\n        paddingTop\n    </Box>\n    <Box paddingBottom="medium" backgroundColor="solitude">\n        paddingBottom\n    </Box>\n    <Box paddingLeft="medium" backgroundColor="solitude">\n        paddingLeft\n    </Box>\n    <Box paddingRight="medium" backgroundColor="solitude">\n        paddingRight\n    </Box>\n</Inline>\n')),Object(l.b)("h3",null,"Margin"),Object(l.b)("blockquote",null,Object(l.b)("p",{parentName:"blockquote"},Object(l.b)("inlineCode",{parentName:"p"},"token"),", ",Object(l.b)("inlineCode",{parentName:"p"},"raw"),", ",Object(l.b)("inlineCode",{parentName:"p"},"theme.margin"))),Object(l.b)("p",null,"Occasionally, you will find use for the margin prop. Margin is more dangerous than padding because it extends beyond the ",Object(l.b)("a",{parentName:"p",href:"https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Box_Model/Introduction_to_the_CSS_box_model"},"box model")," of an html element, and therefore acts similar to a side-effect in a pure function. Therefore, whenever you are creating a ",Object(l.b)("strong",{parentName:"p"},"reusable")," component in your app, avoid using margin that extends outside of that component. And, just like side-effects, it is fine to use margin within the confines of that component."),Object(l.b)("p",null,"Same rules apply to padding, where you should reach for other layout components first before creating a stacking layout."),Object(l.b)("p",null,"You can add margin across all sides, individual, or horizontal or vertical only margin with ",Object(l.b)("inlineCode",{parentName:"p"},"marginX")," and ",Object(l.b)("inlineCode",{parentName:"p"},"marginY"),"."),Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre",className:"language-jsx",metastring:"render=true",render:"true"},'<Box bgColor="deepSolitude">\n    <Inline space="medium">\n        <Box margin="medium" backgroundColor="solitude">\n            margin\n        </Box>\n        <Box marginX="medium" backgroundColor="solitude">\n            marginX\n        </Box>\n        <Box marginY="medium" backgroundColor="solitude">\n            marginY\n        </Box>\n        <Box marginTop="medium" backgroundColor="solitude">\n            marginTop\n        </Box>\n        <Box marginBottom="medium" backgroundColor="solitude">\n            marginBottom\n        </Box>\n        <Box marginLeft="medium" backgroundColor="solitude">\n            marginLeft\n        </Box>\n        <Box marginRight="medium" backgroundColor="solitude">\n            marginRight\n        </Box>\n    </Inline>\n</Box>\n')),Object(l.b)("h3",null,"Border radius"),Object(l.b)("blockquote",null,Object(l.b)("p",{parentName:"blockquote"},Object(l.b)("inlineCode",{parentName:"p"},"token"),", ",Object(l.b)("inlineCode",{parentName:"p"},"theme.space"))),Object(l.b)("p",null,"Similar to margin and padding, border radius has directional shorthands (brt, brb, brr, brl), all being structured like so ",Object(l.b)("strong",{parentName:"p"},"b"),"order ",Object(l.b)("strong",{parentName:"p"},"r"),"adius ",Object(l.b)("strong",{parentName:"p"},"d"),"irection. There is also the standard ",Object(l.b)("inlineCode",{parentName:"p"},"borderRadius")," css prop."),Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre",className:"language-jsx",metastring:"render=true",render:"true"},'<Stack space="small">\n    <Box borderRadius="medium" padding="medium" backgroundColor="solitude">\n        borderRadius="medium"\n    </Box>\n    <Box brt="medium" padding="medium" backgroundColor="solitude">\n        brt="medium" (top)\n    </Box>\n    <Box brb="medium" padding="medium" backgroundColor="solitude">\n        brb="medium" (bottom)\n    </Box>\n    <Box brr="medium" padding="medium" backgroundColor="solitude">\n        brr="medium" (right)\n    </Box>\n    <Box brl="medium" padding="medium" backgroundColor="solitude">\n        brl="medium" (left)\n    </Box>\n</Stack>\n')),Object(l.b)("p",null,"You can combine multiple of these props to create something like our chat message shape."),Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre",className:"language-jsx",metastring:"render",render:!0},'<Box display="flex">\n    <Box brb="medium" brr="medium" padding="medium" backgroundColor="solitude">\n        Here we are combining brb and brr to achieve border radius on three corners.\n    </Box>\n</Box>\n')),Object(l.b)("h3",null,"Display"),Object(l.b)("blockquote",null,Object(l.b)("p",{parentName:"blockquote"},Object(l.b)("inlineCode",{parentName:"p"},"raw (limited)"))),Object(l.b)("p",null,'Box has a default display property of "block" on web, and "flex" in react-native. This is one "gotcha" you have to be aware of while developing cross-platform components. Available values are also different on web and native. Native only supports ',Object(l.b)("inlineCode",{parentName:"p"},"flex")," and ",Object(l.b)("inlineCode",{parentName:"p"},"none"),", while web supports these additional values ",Object(l.b)("inlineCode",{parentName:"p"},"block"),", ",Object(l.b)("inlineCode",{parentName:"p"},"inline-block"),", ",Object(l.b)("inlineCode",{parentName:"p"},"inline"),", and ",Object(l.b)("inlineCode",{parentName:"p"},"inline-flex"),"."),Object(l.b)("h3",null,"Flex"),Object(l.b)("blockquote",null,Object(l.b)("p",{parentName:"blockquote"},Object(l.b)("inlineCode",{parentName:"p"},"raw"))),Object(l.b)("p",null,"Box supports all of the standard cross-platform flex-related properties:"),Object(l.b)("ul",null,Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"justify-content")),Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"align-items")),Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"flex-direction")),Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"flex")),Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"flex-wrap")),Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"flex-grow")),Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"flex-shrink"))),Object(l.b)("p",null,"And the following web-only prop:"),Object(l.b)("ul",null,Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"gap"))),Object(l.b)("h3",null,"Dimensions"),Object(l.b)("blockquote",null,Object(l.b)("p",{parentName:"blockquote"},Object(l.b)("inlineCode",{parentName:"p"},"raw"))),Object(l.b)("p",null,"Box has the following props and accepts raw CSS values as a responsive prop:"),Object(l.b)("ul",null,Object(l.b)("li",{parentName:"ul"},"height"),Object(l.b)("li",{parentName:"ul"},"h"),Object(l.b)("li",{parentName:"ul"},"width"),Object(l.b)("li",{parentName:"ul"},"w"),Object(l.b)("li",{parentName:"ul"},"maxH"),Object(l.b)("li",{parentName:"ul"},"maxW"),Object(l.b)("li",{parentName:"ul"},"minH"),Object(l.b)("li",{parentName:"ul"},"minW")),Object(l.b)("h3",null,"Positioning"),Object(l.b)("blockquote",null,Object(l.b)("p",{parentName:"blockquote"},Object(l.b)("inlineCode",{parentName:"p"},"raw"))),Object(l.b)("p",null,"Box also has the following position-related props and accepts raw CSS values as a responsive prop:"),Object(l.b)("ul",null,Object(l.b)("li",{parentName:"ul"},"position"),Object(l.b)("li",{parentName:"ul"},"top"),Object(l.b)("li",{parentName:"ul"},"left"),Object(l.b)("li",{parentName:"ul"},"right"),Object(l.b)("li",{parentName:"ul"},"bottom")),Object(l.b)("h3",null,"Other"),Object(l.b)("blockquote",null,Object(l.b)("p",{parentName:"blockquote"},Object(l.b)("inlineCode",{parentName:"p"},"raw"))),Object(l.b)("p",null,"These responsive props are used as raw CSS values and correspond to the CSS spec:"),Object(l.b)("ul",null,Object(l.b)("li",{parentName:"ul"},"opacity"),Object(l.b)("li",{parentName:"ul"},"zIndex"),Object(l.b)("li",{parentName:"ul"},"overflow"),Object(l.b)("li",{parentName:"ul"},"pointerEvents"),Object(l.b)("li",{parentName:"ul"},"transform")),Object(l.b)("h2",null,"Non-responsive props"),Object(l.b)("p",null,"Most of the props on Box are responsive with some notable exceptions listed below."),Object(l.b)("h3",null,"Background Color"),Object(l.b)("blockquote",null,Object(l.b)("p",{parentName:"blockquote"},Object(l.b)("inlineCode",{parentName:"p"},"raw"),", ",Object(l.b)("inlineCode",{parentName:"p"},"token"),", ",Object(l.b)("inlineCode",{parentName:"p"},"theme.colors"))),Object(l.b)("p",null,"Props ",Object(l.b)("inlineCode",{parentName:"p"},"backgroundColor")," and its alias ",Object(l.b)("inlineCode",{parentName:"p"},"bgColor")," can be used to set the background color of a Box using one of the design token values from the theme, or a raw css value. Background color available design tokens come from the ",Object(l.b)("inlineCode",{parentName:"p"},"colors")," object in the theme object. To add your own, add the colors to either DesignSystemProvider theme override at the top of your app, or wrap a section with a PatronThemeProvider."),Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre",className:"language-jsx",metastring:"render expanded",render:!0,expanded:!0},'<PatronThemeProvider theme={{colors: {myCoolColor: "#EE9D2B"}}}>\n    <Stack space="small">\n        <Box bgColor="myCoolColor" padding="small">\n            <Text color="white">{\'bgColor="myCoolColor"\'}</Text>\n        </Box>\n        <Box bgColor="solitude" padding="small">\n            <Text>{\'bgColor="solitude"\'}</Text>\n        </Box>\n        <Box bgColor="#626262" padding="small">\n            <Text color="white">{\'bgColor="#626262"\'}</Text>\n        </Box>\n    </Stack>\n</PatronThemeProvider>\n')),Object(l.b)("h3",null,"Borders"),Object(l.b)("blockquote",null,Object(l.b)("p",{parentName:"blockquote"},Object(l.b)("inlineCode",{parentName:"p"},"raw"),", ",Object(l.b)("inlineCode",{parentName:"p"},"token"),", ",Object(l.b)("inlineCode",{parentName:"p"},"theme.colors"))),Object(l.b)("p",null,"The following props are not responsive, ",Object(l.b)("inlineCode",{parentName:"p"},"borderWidth"),", ",Object(l.b)("inlineCode",{parentName:"p"},"borderTopWidth"),", ",Object(l.b)("inlineCode",{parentName:"p"},"borderBottomWidth"),", ",Object(l.b)("inlineCode",{parentName:"p"},"borderLeftWidth"),", ",Object(l.b)("inlineCode",{parentName:"p"},"borderRightWidth"),", and accept raw CSS values. While ",Object(l.b)("inlineCode",{parentName:"p"},"borderColor")," accepts both design tokens and raw values."),Object(l.b)("p",null,"Border color available design tokens come from the ",Object(l.b)("inlineCode",{parentName:"p"},"colors")," object in the theme object. To add your own, add the colors to either DesignSystemProvider theme override at the top of your app, or wrap a section with a PatronThemeProvider."),Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre",className:"language-jsx",metastring:"render expanded",render:!0,expanded:!0},'<PatronThemeProvider theme={{colors: {myCoolColor: "#EE9D2B"}}}>\n    <Box borderColor="myCoolColor" borderWidth={1} padding="medium">\n        <Text>Hello</Text>\n    </Box>\n</PatronThemeProvider>\n')),Object(l.b)("h2",null,"Interaction props"),Object(l.b)("p",null,"On the web platform, Box also accepts two interaction-related props, ",Object(l.b)("inlineCode",{parentName:"p"},"_hover")," and ",Object(l.b)("inlineCode",{parentName:"p"},"_focus"),". These two props accept an object of props that will get applied on hover, or focus."),Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre",className:"language-jsx",metastring:"render expanded",render:!0,expanded:!0},'<Box\n    as="button"\n    paddingX="medium"\n    paddingY="small"\n    borderRadius="xsmall"\n    bgColor="solitude"\n    _hover={{bgColor: "deepSolitude"}}\n    _focus={{bgColor: "smartGrey"}}\n    transition=".2s ease all"\n>\n    <Text>Hello</Text>\n</Box>\n')))}s.isMDXComponent=!0;i.a.createElement;var d={},c="wrapper";function m(e){var n=e.components,t=Object(a.a)(e,["components"]);return Object(l.b)(c,Object(o.a)({},d,t,{components:n,mdxType:"MDXLayout"}),Object(l.b)(s,{mdxType:"Readme"}))}m.isMDXComponent=!0},ORkb:function(e,n,t){(window.__NEXT_P=window.__NEXT_P||[]).push(["/components/layout/box",function(){return t("KmaY")}])},ZVZ0:function(e,n,t){"use strict";t.d(n,"a",(function(){return d})),t.d(n,"b",(function(){return g}));var o=t("ERkP"),a=t.n(o);function r(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function i(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);n&&(o=o.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,o)}return t}function l(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?i(Object(t),!0).forEach((function(n){r(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):i(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function p(e,n){if(null==e)return{};var t,o,a=function(e,n){if(null==e)return{};var t,o,a={},r=Object.keys(e);for(o=0;o<r.length;o++)t=r[o],n.indexOf(t)>=0||(a[t]=e[t]);return a}(e,n);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(o=0;o<r.length;o++)t=r[o],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var b=a.a.createContext({}),s=function(e){var n=a.a.useContext(b),t=n;return e&&(t="function"===typeof e?e(n):l(l({},n),e)),t},d=function(e){var n=s(e.components);return a.a.createElement(b.Provider,{value:n},e.children)},c="mdxType",m={inlineCode:"code",wrapper:function(e){var n=e.children;return a.a.createElement(a.a.Fragment,{},n)}},u=a.a.forwardRef((function(e,n){var t=e.components,o=e.mdxType,r=e.originalType,i=e.parentName,b=p(e,["components","mdxType","originalType","parentName"]),d=s(t),c=o,u=d["".concat(i,".").concat(c)]||d[c]||m[c]||r;return t?a.a.createElement(u,l(l({ref:n},b),{},{components:t})):a.a.createElement(u,l({ref:n},b))}));function g(e,n){var t=arguments,o=n&&n.mdxType;if("string"===typeof e||o){var r=t.length,i=new Array(r);i[0]=u;var l={};for(var p in n)hasOwnProperty.call(n,p)&&(l[p]=n[p]);l.originalType=e,l[c]="string"===typeof e?e:o,i[1]=l;for(var b=2;b<r;b++)i[b]=t[b];return a.a.createElement.apply(null,i)}return a.a.createElement.apply(null,t)}u.displayName="MDXCreateElement"},cxan:function(e,n,t){"use strict";function o(){return(o=Object.assign||function(e){for(var n=1;n<arguments.length;n++){var t=arguments[n];for(var o in t)Object.prototype.hasOwnProperty.call(t,o)&&(e[o]=t[o])}return e}).apply(this,arguments)}t.d(n,"a",(function(){return o}))}},[["ORkb",0,1]]]);
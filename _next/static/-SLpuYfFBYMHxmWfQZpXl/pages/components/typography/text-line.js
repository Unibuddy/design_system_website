(window.webpackJsonp=window.webpackJsonp||[]).push([[65],{HbGN:function(e,n,t){"use strict";function r(e,n){if(null==e)return{};var t,r,o=function(e,n){if(null==e)return{};var t={};for(var r in e)if(Object.prototype.hasOwnProperty.call(e,r)){if(n.indexOf(r)>=0)continue;t[r]=e[r]}return t}(e,n);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)t=a[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(o[t]=e[t])}return o}t.d(n,"a",(function(){return r}))},Km8e:function(e,n,t){"use strict";var r=Object.assign.bind(Object);e.exports=r,e.exports.default=e.exports},ZVZ0:function(e,n,t){"use strict";t.d(n,"a",(function(){return s})),t.d(n,"b",(function(){return f}));var r=t("ERkP"),o=t.n(r);function a(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function l(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function c(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?l(Object(t),!0).forEach((function(n){a(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):l(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function i(e,n){if(null==e)return{};var t,r,o=function(e,n){if(null==e)return{};var t,r,o={},a=Object.keys(e);for(r=0;r<a.length;r++)t=a[r],n.indexOf(t)>=0||(o[t]=e[t]);return o}(e,n);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)t=a[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(o[t]=e[t])}return o}var p=o.a.createContext({}),b=function(e){var n=o.a.useContext(p),t=n;return e&&(t="function"===typeof e?e(n):c(c({},n),e)),t},s=function(e){var n=b(e.components);return o.a.createElement(p.Provider,{value:n},e.children)},u="mdxType",d={inlineCode:"code",wrapper:function(e){var n=e.children;return o.a.createElement(o.a.Fragment,{},n)}},y=o.a.forwardRef((function(e,n){var t=e.components,r=e.mdxType,a=e.originalType,l=e.parentName,p=i(e,["components","mdxType","originalType","parentName"]),s=b(t),u=r,y=s["".concat(l,".").concat(u)]||s[u]||d[u]||a;return t?o.a.createElement(y,c(c({ref:n},p),{},{components:t})):o.a.createElement(y,c({ref:n},p))}));function f(e,n){var t=arguments,r=n&&n.mdxType;if("string"===typeof e||r){var a=t.length,l=new Array(a);l[0]=y;var c={};for(var i in n)hasOwnProperty.call(n,i)&&(c[i]=n[i]);c.originalType=e,c[u]="string"===typeof e?e:r,l[1]=c;for(var p=2;p<a;p++)l[p]=t[p];return o.a.createElement.apply(null,l)}return o.a.createElement.apply(null,t)}y.displayName="MDXCreateElement"},cxan:function(e,n,t){"use strict";function r(){return(r=Object.assign?Object.assign.bind():function(e){for(var n=1;n<arguments.length;n++){var t=arguments[n];for(var r in t)Object.prototype.hasOwnProperty.call(t,r)&&(e[r]=t[r])}return e}).apply(this,arguments)}t.d(n,"a",(function(){return r}))},gz60:function(e,n,t){(window.__NEXT_P=window.__NEXT_P||[]).push(["/components/typography/text-line",function(){return t("vhba")}])},vhba:function(e,n,t){"use strict";t.r(n),t.d(n,"default",(function(){return f}));var r=t("cxan"),o=t("HbGN"),a=t("ERkP"),l=t.n(a),c=t("ZVZ0"),i=["components"],p=(l.a.createElement,{}),b="wrapper";function s(e){var n=e.components,t=Object(o.a)(e,i);return Object(c.b)(b,Object(r.a)({},p,t,{components:n,mdxType:"MDXLayout"}),Object(c.b)("h1",null,"TextLine"),Object(c.b)("p",null,"Use this component when you need to modify some inline text so that it has a different weight or tone of color."),Object(c.b)("pre",null,Object(c.b)("code",{parentName:"pre",className:"language-js"},'import {TextLine} from "@unibuddy/patron";\n')),Object(c.b)("h2",null,"Readiness"),Object(c.b)("pre",null,Object(c.b)("code",{parentName:"pre",className:"language-jsx",metastring:"render functional",render:!0,functional:!0},'function Render() {\n    const readiness = [\n        {\n            key: "Native",\n            ready: true,\n        },\n\n        {\n            key: "Theme",\n            ready: false,\n        },\n        {\n            key: "Typescript",\n            ready: false,\n        },\n    ];\n\n    return (\n        <Inline space="medium">\n            {readiness.map(param => (\n                <Box\n                    bgColor={param.ready ? "#43A047" : "#E53935"}\n                    borderRadius="large"\n                    padding="small"\n                >\n                    <Inline space="small" verticalAlign="center">\n                        <Text color="white" weight="bold">\n                            {param.key}\n                        </Text>\n                    </Inline>\n                </Box>\n            ))}\n        </Inline>\n    );\n}\n')),Object(c.b)("h2",null,"Composition"),Object(c.b)("pre",null,Object(c.b)("code",{parentName:"pre",className:"language-jsx"},'<TextBlock>\n    Hello, <TextLine weight="700">this is some bold text.</TextLine>\n</TextBlock>\n')),Object(c.b)("h2",null,"Testing"),Object(c.b)("p",null,"Generally, you should be using ",Object(c.b)("inlineCode",{parentName:"p"},"getByText")," and ",Object(c.b)("inlineCode",{parentName:"p"},"findByText")," from ",Object(c.b)("inlineCode",{parentName:"p"},"@testing-library/react"),". Avoid trying to add ",Object(c.b)("inlineCode",{parentName:"p"},"data-test-id"),", ",Object(c.b)("inlineCode",{parentName:"p"},"TextLine")," doesn't pass it through. Using this or other inline components to wrap pieces of text will make it broken up in the DOM structure, therefore, ",Object(c.b)("inlineCode",{parentName:"p"},"getByText")," will not work. In the example above, either query for the ",Object(c.b)("inlineCode",{parentName:"p"},"this is some bold text."),", or try and grab a parent element by role and check the ",Object(c.b)("inlineCode",{parentName:"p"},"element.textContent")," property to get the full text."),Object(c.b)("p",null,"For this code:"),Object(c.b)("pre",null,Object(c.b)("code",{parentName:"pre",className:"language-jsx"},'<Button>\n    <TextBlock>\n        Hello, <TextLine weight="700">this is some bold text.</TextLine>\n    </TextBlock>\n</Button>\n')),Object(c.b)("p",null,"Using getByRole and the full text will work."),Object(c.b)("pre",null,Object(c.b)("code",{parentName:"pre",className:"language-js"},'getByRole("button", {name: "Hello, this is some bold text."});\n')),Object(c.b)("h2",null,"All Properties"),Object(c.b)("h4",null,"Type Glossary"),Object(c.b)("p",null,Object(c.b)("a",{parentName:"p",href:"/components/typography/type-glossary"},"All typography property types are defined here.")),Object(c.b)("pre",null,Object(c.b)("code",{parentName:"pre",className:"language-jsx",metastring:"render functional",render:!0,functional:!0},'function Render() {\n    const props = [\n        {\n            key: "color",\n            type: "string",\n            description: "Color of the text",\n            default: "<string>-themed",\n        },\n        {\n            key: "weight",\n            type: "FontWeightAbsolute | FontWeights",\n            description: "Weight applied to the font",\n            default: "normal",\n        },\n    ];\n\n    const codeBlockStyle = {\n        fontSize: "14px",\n    };\n\n    return (\n        <Table bordered={true}>\n            <TableHead>\n                <TableRow>\n                    <TableHeader>Key</TableHeader>\n                    <TableHeader>Type</TableHeader>\n                    <TableHeader>Description</TableHeader>\n                    <TableHeader>Default</TableHeader>\n                </TableRow>\n            </TableHead>\n            <TableBody>\n                {props.map(prop => {\n                    return (\n                        <TableRow>\n                            <TableCell>\n                                <code style={codeBlockStyle}>{prop.key}</code>\n                            </TableCell>\n                            <TableCell>\n                                <code style={codeBlockStyle}>{prop.type}</code>\n                            </TableCell>\n                            <TableCell>\n                                <Text size="small">{prop.description}</Text>\n                            </TableCell>\n                            <TableCell>\n                                {prop.default.includes("<string>") ? (\n                                    <Text size="small">\n                                        {prop.default.replace("<string>-", "")}\n                                    </Text>\n                                ) : (\n                                    <code style={codeBlockStyle}>{prop.default}</code>\n                                )}\n                            </TableCell>\n                        </TableRow>\n                    );\n                })}\n            </TableBody>\n        </Table>\n    );\n}\n')))}s.isMDXComponent=!0;var u=["components"],d=(l.a.createElement,{}),y="wrapper";function f(e){var n=e.components,t=Object(o.a)(e,u);return Object(c.b)(y,Object(r.a)({},d,t,{components:n,mdxType:"MDXLayout"}),Object(c.b)(s,{mdxType:"Readme"}))}f.isMDXComponent=!0}},[["gz60",0,1]]]);